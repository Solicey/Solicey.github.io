{"pages":[{"title":"Categories","date":"2022-07-07T07:04:13.993Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2022-07-07T06:05:10.401Z","path":"tags/index.html","text":""},{"title":"About","date":"2022-07-07T06:05:10.401Z","path":"about/index.html","text":""}],"posts":[{"title":"03. 光栅化与抗锯齿","date":"2022-07-09T01:52:32.481Z","path":"wiki/GAMES101/2022-07-09-[03]光栅化/","text":"参考资料： games101作业02：Triangles and Z-buffering Games101 作业2 Triangles and Z-buffering(源码+常见问题) 我们将以作业02作为本小节的动机。 作业内容在上次作业中，虽然我们在屏幕上画出一个线框三角形，但这看起来并不是那么的有趣。所以这一次我们继续推进一步——在屏幕上画出一个实心三角形，换言之，栅格化一个三角形。上一次作业中，在视口变化之后，我们调用了函数rasterize_wireframe(const Triangle&amp; t)。但这一次，你需要自己填写并调用函数 rasterize_triangle(const Triangle&amp; t)。 该函数的内部工作流程如下： 创建三角形的 2 维 bounding box。 遍历此 bounding box 内的所有像素（使用其整数索引）。然后，使用像素中心的屏幕空间坐标来检查中心点是否在三角形内。 如果在内部，则将其位置处的插值深度值 (interpolated depth value) 与深度缓冲区 (depth buffer) 中的相应值进行比较。 如果当前点更靠近相机，请设置像素颜色并更新深度缓冲区 (depth buffer)。 你需要修改的函数如下： rasterize_triangle(): 执行三角形栅格化算法 static bool insideTriangle(): 测试点是否在三角形内。你可以修改此函数的定义，这意味着，你可以按照自己的方式更新返回类型或函数参数。 知识点判断像素中心点是否在三角形内想要光栅化一个三角形，就得先判断屏幕上的像素是否在三角形的范围内。 如果把三角形看作由首尾相连的向量围成，那么我们只需判断像素中心点是否在这三个向量的同一侧。假设三角形三个顶点分别为$A,B,C$，像素中心点为$P$，我们进行三次叉乘计算：$\\vec{AB}\\times \\vec{AP},\\vec{BC}\\times \\vec{BP},\\vec{CA}\\times \\vec{CP}$。如果三次运算的结果都为正或都为负，那么$P$点在三角形内部。对应代码如下： 12345678910111213141516171819202122232425static bool insideTriangle(int x, int y, const Vector3f* _v)&#123; // TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2] Eigen::Vector2f P(x, y); Eigen::Vector2f A = _v[0].head(2), B = _v[1].head(2), C = _v[2].head(2); Eigen::Vector2f AP = P - A, BP = P - B, CP = P - C, AB = B - A, BC = C - B, CA = A - C; float c1 = AB[0] * AP[1] - AB[1] * AP[0]; float c2 = BC[0] * BP[1] - BC[1] * BP[0]; float c3 = CA[0] * CP[1] - CA[1] * CP[0]; // Eigen库不支持二维向量的叉乘运算，需要手动列式 if ((c1 &gt; 0 &amp;&amp; c2 &gt; 0 &amp;&amp; c3 &gt; 0) || (c1 &lt; 0 &amp;&amp; c2 &lt; 0 &amp;&amp; c3 &lt; 0)) return true; return false;&#125; 光栅化首先，我们用一个包围盒确定要进行像素中心点判断的范围，这样就能避免每画一个三角形就要遍历整个屏幕的行为。如果我们采用AABB，即轴对齐包围盒，那么比较三个顶点的x值y值大小即可确定其范围。为了方便遍历像素点，包围盒的边界需要向外取整。 接下来，我们遍历包围盒中的像素点，用insideTriangle函数判断其是否在三角形范围内。如果在，那么通过重心坐标计算对应的插值深度值，并进行深度检测，即与深度缓冲区的值进行比较。如果当前点更靠近相机，那么设置像素的颜色，并更新深度缓冲区对应的值。代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142//Screen space rasterizationvoid rst::rasterizer::rasterize_triangle(const Triangle&amp; t) &#123; auto v = t.toVector4(); // 确定包围盒的范围 float x_min = std::min(std::min(v[0].x(), v[1].x()), v[2].x()); float y_min = std::min(std::min(v[0].y(), v[1].y()), v[2].y()); float x_max = std::max(std::max(v[0].x(), v[1].x()), v[2].x()); float y_max = std::max(std::max(v[0].y(), v[1].y()), v[2].y()); x_min = (int)std::floor(x_min); x_max = (int)std::ceil(x_max); y_min = (int)std::floor(y_min); y_max = (int)std::ceil(y_max); // 遍历包围盒中的像素，并判断其是否在三角形范围内 for (int x = x_min; x &lt;= x_max; x++) &#123; for (int y = y_min; y &lt;= y_max; y++) &#123; if (insideTriangle(x + 0.5, y + 0.5, t.v)) &#123; // 如果在，就用重心坐标计算对应的插值深度值 auto tup = computeBarycentric2D(x, y, t.v); float alpha, beta, gamma; std::tie(alpha, beta, gamma) = tup; float w_reciprocal = 1.0/(alpha / v[0].w() + beta / v[1].w() + gamma / v[2].w()); float z_interpolated = alpha * v[0].z() / v[0].w() + beta * v[1].z() / v[1].w() + gamma * v[2].z() / v[2].w(); z_interpolated *= w_reciprocal; // ↑重心坐标插值代码由助教提供 // 深度检测：与深度缓冲区中的值进行比较，如果离摄像机更近，那就绘制并更新缓冲区 if (z_interpolated &lt; depth_buf[get_index(x, y)]) &#123; set_pixel(Vector3f(x, y, z_interpolated), t.getColor()); depth_buf[get_index(x, y)] = z_interpolated; &#125; &#125; &#125; &#125; &#125; 课程中暂未涉及重心坐标插值，该部分代码由助教提供。如果对此感兴趣，可以看一下这篇文章：计算机图形学 1：重心坐标系（Barycentric coordinate system）详解 抗锯齿/反走样作业02的附加题如下： [提高项 5 分] 用 super-sampling 处理 Anti-aliasing : 你可能会注意到，当我们放大图像时，图像边缘会有锯齿感。我们可以用 super-sampling来解决这个问题，即对每个像素进行 2 * 2 采样，并比较前后的结果 (这里并不需要考虑像素与像素间的样本复用)。需要注意的点有，对于像素内的每一个样本都需要维护它自己的深度值，即每一个像素都需要维护一个 sample list。最后，如果你实现正确的话，你得到的三角形不应该有不正常的黑边。 图像边缘有“锯齿”，从信号处理的角度看，这是因为采样的频率低于图像的频率。我们用有限离散的像素点去逼近连续的三角形，自然会出现这种锯齿走样的现象。以下将介绍两种反走样的方法，第二种可以当成第一种的改良。 参考文章：MSAA和SSAA的详细说明 超采样反走样（Super Sampling AA）SSAA的动机非常简单。如果有限离散像素点逼近结果不好，那就用更多的采样点去逼近。我们将原来的每个像素点进行细分。例如，我们可以将一个像素点等分出四个采样点（对应游戏中抗锯齿选项的$\\times 2$。对每个采样点计算颜色，然后将像素内部采样点的颜色值全部加起来取平均。 然而，SSAA存在一定的开销问题。还是以四等分为例：原始的算法会为像素点维护depth_buffer和color_buffer，n个像素点就对应n大小的数组，使用SSAA后，子采样点的深度和颜色也要维护。所以depth_buffer和color_buffer的数组大小就扩充到2*2*n。与此同时，SSAA的计算复杂度也会增大，因为判定是否在三角形内、深度检测和计算着色的操作会增多。 多采样反走样（Multi-Sampling AA）MSAA是对SSAA的优化。其思路如下：既然最后显示在屏幕上的是各个母像素的颜色，那么直接从子采样点的三角形覆盖情况得到母像素的颜色就行了。 例如上图中，四个子采样点中有两个在三角形内，在计算完母像素中心的颜色后，将该颜色乘以50%即是最终颜色。以下是MSAA的图示与具体流程： 光栅化阶段。对四个$\\times$位置的sample执行三角形覆盖判断，在一个四倍分辨率大小的coverage mask中记录每个sample被覆盖的情况，比如下面的2个sample通过了覆盖测试，则掩码为0011。 像素着色阶段。对至少有1个sample通过了覆盖测试的像素着色，用像素中心点或者某个已覆盖的sample的坐标执行像素着色器。（注：有的时候，三角形可能没有覆盖到像素的中心位置，这时候如果再使用像素中心点的坐标着色，就可能得到错误的渲染效果。GPU硬件会使用centroid sampling来调整采样点的位置，当像素中心点被覆盖时，是正常的像素中心点的采样，而当像素中心点未被三角形覆盖时，GPU就会挑选最近的通过覆盖测试的次像素点，作为采样点。） 对4个sample中通过覆盖测试的执行深度测试，并将测试通过的sample插值得来的深度值写入深度缓冲。每个sample都拥有自己的深度值。 上图中左下两个sample通过了深度测试，并且coverage mask为1，因此将像素着色阶段得到的颜色copy到这两个sample对应的颜色缓冲中（依然是每个sample一个颜色，共四倍大小）。其他两个sample暂为背景色。 重复上述流程绘制第二个黄色三角形，将像素着色获得的黄色复制到右上角的sample中。 所有绘制结束之后，将四个sample的颜色resolve获得最终输出的像素颜色。一般情况下，MSAA是硬件直接用box filter进行resolve，也就是将像素中对应的次像素点中的颜色直接取平均值。 MSAA与SSAA的最大区别在于，SSAA对像素内的所有采样点进行shader计算；而MSAA只选择像素中的一个sample作为采样点，具体挑选哪个点详见第2步。这样就节省了很大一部分的计算开销，尽管MSAA的内存开销还是和SSAA一样多。 \\bf{END.}","tags":[{"name":"CS","slug":"CS","permalink":"https://solicey.github.io/tags/CS/"},{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"}],"categories":[{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"GAMES101","slug":"图形学/GAMES101","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/"}]},{"title":"02. 视图变换","date":"2022-07-08T04:15:03.438Z","path":"wiki/GAMES101/2022-07-08-[02]视图变换/","text":"参考资料： 计算机图形学二：视图变换(坐标系转化，正交投影，透视投影，视口变换) 一文读懂正交投影变换 视图变换的任务：把三维虚拟世界中以$(x,y,z)$为坐标的物体变换到用一个个像素位置$(x,y)$表示的二维屏幕坐标系中。整个过程可以被细分成如下几个步骤。 模型变换（modeling transformation）：将虚拟世界中的物体调整至它们应该在的位置。 摄像机变换（camera transformation）：我们真正在乎的是摄像机所看到的东西，因此需要得到物体与摄像机的相对位置。 投影变换（projection transformation）：得到所有可视范围内的物体对于摄像机的相对位置坐标$(x,y,z)$后，进行正交投影或者透视投影，将三维物体投影至标准二维平面（$[-1,1]\\times[-1,1]$）上。 视口变换（viewport transformation）：将标准平面映射到屏幕分辨率范围内，即$[-1,1]\\times[-1,1]\\rightarrow[0,width]\\times[0,height]$. 模型变换（modeling transformation）模型变换其实就是利用基本变换矩阵将模型调整至我们想要的地方，详情请见基本变换矩阵总结。 摄像机变换（camera transformation）前面提到，我们需要获得物体与摄像机的相对位置。如果我们把摄像机和物体一起移动，并将摄像机的坐标轴（设为$u,v,w$）移动到世界坐标轴$x,y,z$，那么此时物体的坐标就是与摄像机的相对坐标。 那么如何让摄像机的坐标系与世界坐标系重合呢？我们先定义三个变量 摄像机位置(eye position)： $\\bf{e}$ 观察方向(gaze position)： $\\bf{g}$ 视点正上方向(view-up vector)： $\\bf{t}$ 那么我们就可以建立摄像机坐标系了，定义如下： \\begin{aligned} \\bf{w} & = -\\frac{\\bf{g}}{\\parallel\\bf{g}\\parallel}, \\\\ \\bf{u} & = \\frac{\\bf{t}\\times \\bf{w}}{\\parallel\\bf{t}\\times \\bf{w}\\parallel},\\\\ \\bf{v} & = \\bf{w} \\times u \\end{aligned}其中$u,v,w$对应标准坐标系的$x,y,z$。示意图如下所示： 其实我感觉，直接拿$\\bf{t}$作为基向量也不是不行，而且还更省事一些。 接下来，就要将其移动到世界坐标系。有如下两个步骤： 将相机位置移动到世界坐标系原点 通过旋转矩阵将二者坐标系重合 第一步只需要简单地减去相机位置坐标$\\bf{e}$即可，第二步只需用一个$(u,v,w)^T$矩阵就能将摄像机坐标系旋转至世界坐标系，这部分内容在基本变换矩阵总结中的“绕任意轴旋转”提到过。 我们定义摄像机变换矩阵$M_{cam}$如下所示： \\bf{M_{cam}}= \\begin{bmatrix} \\bf{u} & \\bf{v} & \\bf{w} & \\bf{e} \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}^{-1}= \\begin{bmatrix} x_u & y_u & z_u & 0 \\\\ x_v & y_v & z_v & 0 \\\\ x_w & y_w & z_w & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 & -x_e \\\\ 0 & 1 & 0 & -y_e \\\\ 0 & 0 & 1 & -z_e \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}注意到，我们是先位移再线性变换，所以不能直接把两个操作合并成一个仿射变换矩阵。 投影变换（projection transformation）投影变换分为正交投影变换与透视投影变换。 正交投影变换在正交投影中，所有的光线都是平行传播。这些平行光将物体的影像垂直地投射到画面上。为了节省计算资源，我们会定义一个“可视空间”，只有在可视空间中的物体才需要绘制。 正交投影定义的可视空间是一个盒状的空间，由上下左右远近共6个裁切面组成。 值得注意的是，由于观察方向是$z$轴的负方向，故$n&gt;f$. 我们采用如下步骤，将可视空间压缩至一个$[-1,1]^3$的空间当中。规范化坐标系是为了方便移植，使得坐标系独立于各种尺寸的图形设备。为了能够确定物体的前后关系，我们仍需保留$z$轴的值，故我们采用四维的齐次坐标系。 平移变换：将盒状可视空间的中心点移动到坐标原点。这一步的变换矩阵为： \\bf{M_{translate}}= \\begin{bmatrix} 1 & 0 & 0 & -\\frac{r+l}{2} \\\\ 0 & 1 & 0 & -\\frac{t+b}{2} \\\\ 0 & 0 & 1 & -\\frac{n+f}{2} \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} 缩放变换：通过缩放使其成为范围都是$[-1,1]$的立方体。这一步的变换矩阵为： \\bf{M_{scale}}= \\begin{bmatrix} \\frac{2}{r-l} & 0 & 0 & 0 \\\\ 0 & \\frac{2}{t-b} & 0 & 0 \\\\ 0 & 0 & \\frac{2}{n-f} & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}两个矩阵相乘后就得到了正交投影变换矩阵： \\bf{M_{ortho}}=\\bf{M_{scale}}\\bf{M_{translate}}= \\begin{bmatrix} \\frac{2}{r-l} & 0 & 0 & -\\frac{r+l}{r-l} \\\\ 0 & \\frac{2}{t-b} & 0 & -\\frac{t+b}{t-b} \\\\ 0 & 0 & \\frac{2}{n-f} & -\\frac{n+f}{n-f} \\\\ 0 & 0 & 0 & 1 \\end{bmatrix}透视投影变换透视投影遵循近大远小的透视原理，其可视空间不再是“盒状”，而是“四棱台”状。我们希望将这个四棱台“压缩”成盒状，再将其规范化。下图是投影过程的剖面图。 $z=-n$是投影平面。我们将点$(x,y,z)$投影至该平面后，它的坐标变为$(x’,y’,z’)$。利用相似三角形的性质，我们很容易求得$x’$和$y’$。然而，我们希望在变换的过程中，像正交投影那样保留$z$轴的信息以表示物体的远近。简单地令$z’=z$显然不正确，如果我们暂时不知如何解决，不妨先用未知量表示。 我们希望找到一个矩阵完成如下变换： \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix} \\Rightarrow \\begin{pmatrix} nx/z \\\\ ny/z \\\\ \\rm{unknown} \\\\ 1 \\end{pmatrix} \\Rightarrow^{(\\text{mult. by z})} \\begin{pmatrix} nx \\\\ ny \\\\ \\rm{still\\ unknown} \\\\ z \\end{pmatrix}即： \\bf{M_{persp\\rightarrow ortho}^{(4\\times 4)}} \\begin{pmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} nx \\\\ ny \\\\ \\rm{unknown} \\\\ z \\end{pmatrix}我们很容易地确定了这个矩阵的前两行和最后一行： \\bf{M_{persp\\rightarrow ortho}^{(4\\times 4)}}= \\begin{bmatrix} n & 0 & 0 & 0 \\\\ 0 & n & 0 & 0 \\\\ ? & ? & ? & ? \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}为了确定第三行，我们需要利用透视投影的一个性质：可视空间的前后面$z$轴坐标变换前后保持不变。 设第三行为$(0,0,A,B)$，利用这个性质分别代入远近平面的任意两点就可以列出等式： \\begin{cases} An+B=n^2 \\\\ Af+B=f^2 \\end{cases}容易解得$A=n+f,\\ B=-nf$。 因此变换矩阵为： \\bf{M_{persp\\rightarrow ortho}^{(4\\times 4)}}= \\begin{bmatrix} n & 0 & 0 & 0 \\\\ 0 & n & 0 & 0 \\\\ 0 & 0 & n+f & -fn \\\\ 0 & 0 & 1 & 0 \\end{bmatrix}接下来的操作就和正交投影变换一样了，将压缩得到的盒状空间规范化成标准立方体。 \\bf{M_{persp}}=\\bf{M_{ortho}}\\bf{M_{persp\\rightarrow ortho}}=\\begin{bmatrix} \\frac{2n}{r-l} & 0 & \\frac{l+r}{l-r} & 0 \\\\ 0 & \\frac{2n}{t-b} & \\frac{b+t}{b-t} & 0 \\\\ 0 & 0 & \\frac{f+n}{n-f} & \\frac{2fn}{f-n} \\\\ 0 & 0 & 1 & 0 \\end{bmatrix} 视口变换（viewport transformation）视口变换就是两个范围空间的转换$[-1,1]\\times[-1,1]\\rightarrow[0,width]\\times[0,height]$，我们可以先缩放，再位移。 \\bf{M_{viewport}}= \\begin{bmatrix} \\frac{width}{2} & 0 & 0 & \\frac{width}{2} \\\\ 0 & \\frac{height}{2} & 0 & \\frac{height}{2} \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} 总结与作业01经历上述四个变换，我们就可以把虚拟世界中的任意可视物体投射到屏幕上了！总的矩阵就是： \\bf{M}=\\bf{M_{viewport}}\\bf{M_{persp}}\\bf{M_{camera}}\\bf{M_{model}}作业01要求我们完善两个函数：模型变换函数与投影变换函数。 get_model_matrix(float rotation_angle)：构建绕z轴旋转rotation_angle角度的变换矩阵，并返回该矩阵。 get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)：使用给定的参数，构建透视投影矩阵。其中eye_fov是视场角（竖直方向），aspect_ratio是宽高比。 代码如下：（代码来源：games101作业1：旋转与投影） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061Eigen::Matrix4f get_model_matrix(float angle)&#123; Eigen::Matrix4f rotation; angle = angle * MY_PI / 180.f; rotation &lt;&lt; cos(angle), 0, sin(angle), 0, 0, 1, 0, 0, -sin(angle), 0, cos(angle), 0, 0, 0, 0, 1; Eigen::Matrix4f scale; scale &lt;&lt; 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1; Eigen::Matrix4f translate; translate &lt;&lt; 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1; return translate * rotation * scale;&#125;Eigen::Matrix4f get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)&#123; Eigen::Matrix4f projection = Eigen::Matrix4f::Identity(); Eigen::Matrix4f M_persp2ortho(4, 4); Eigen::Matrix4f M_ortho_scale(4, 4); Eigen::Matrix4f M_ortho_trans(4, 4); float angle = eye_fov * MY_PI / 180.0; // 视场角（弧度制） float height = zNear * tan(angle / 2) * 2; float width = height * aspect_ratio; auto t = -zNear * tan(angle / 2); auto b = -t; auto r = t * aspect_ratio; auto l = -r; M_persp2ortho &lt;&lt; zNear, 0, 0, 0, 0, zNear, 0, 0, 0, 0, zNear + zFar, -zNear * zFar, 0, 0, 1, 0; M_ortho_scale &lt;&lt; 2 / (r - l), 0, 0, 0, 0, 2 / (t - b), 0, 0, 0, 0, 2 / (zNear - zFar), 0, 0, 0, 0, 1; M_ortho_trans &lt;&lt; 1, 0, 0, -(r + l) / 2, 0, 1, 0, -(t + b) / 2, 0, 0, 1, -(zNear + zFar) / 2, 0, 0, 0, 1; Eigen::Matrix4f M_ortho = M_ortho_scale * M_ortho_trans; projection = M_ortho * M_persp2ortho * projection; return projection;&#125; END.","tags":[{"name":"线性代数","slug":"线性代数","permalink":"https://solicey.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"CS","slug":"CS","permalink":"https://solicey.github.io/tags/CS/"},{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"}],"categories":[{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"GAMES101","slug":"图形学/GAMES101","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/"}]},{"title":"Hexo博客备忘录","date":"2022-07-07T12:43:12.256Z","path":"wiki/Logs/Hexo博客备忘录/","text":"引用本地图片按照官方的 asset-folders 的方法处理图片引用，在本地预览时是无法显示的，参考文章 hexo中完美插入本地图片 ，总结出如下的解决方案： （1）开启 post_asset_folder 12// config.ymlpost_asset_folder: true （2）安装 hexo-asset-image 插件 1npm install https://github.com/CodeFalling/hexo-asset-image --save （3）使用方式 在与 _posts/my_article.md的平级位置上创建文件夹 my_article； 放置 my_article.md 文件中引用到的图片，例如 my_pic.jpg； 在 my_article.md 以 ![my_pic](my_article/my_pic.jpg) 方式引用。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://solicey.github.io/tags/hexo/"}],"categories":[{"name":"日志","slug":"日志","permalink":"https://solicey.github.io/categories/%E6%97%A5%E5%BF%97/"}]},{"title":"01. 基本变换矩阵总结","date":"2022-07-07T12:41:32.987Z","path":"wiki/GAMES101/2022-07-07-[01]基本变换矩阵总结/","text":"参考资料：计算机图形学一：基础变换矩阵总结(缩放，旋转，位移) 2D线性变换将如下矩阵乘法定义为对向量$(x,y)^T$的线性变换。 \\begin{bmatrix} a_{11} & a_{12} \\\\ a_{21} & a_{22} \\end{bmatrix} \\begin{bmatrix} x\\\\ y \\end{bmatrix}= \\begin{bmatrix} a_{11}x + a_{12}y \\\\ a_{21}x + a_{22}y \\end{bmatrix}缩放缩放使一种沿着坐标轴作用的变换，定义如下： scale(s_x,s_y)=\\begin{bmatrix} s_x & 0 \\\\ 0 & s_y \\end{bmatrix}即除了$(0,0)^T$保持不变以外，其他点变为$(s_xx,s_yy)^T$. 剪切直观理解就是把物体的一边固定，然后拉另外一边。定义如下： shear-x(s)=\\begin{bmatrix} 1 & s \\\\ 0 & 1 \\end{bmatrix} \\\\ shear-y(s)=\\begin{bmatrix} 1 & 0 \\\\ s & 1 \\end{bmatrix}旋转记$\\phi$为旋转角度，则定义如下： rotate(\\phi)=\\begin{bmatrix} \\cos \\phi & -\\sin\\phi \\\\ \\sin\\phi & \\cos\\phi \\end{bmatrix}注意该式是逆时针旋转，且原点为旋转中心。 3D线性变换缩放与旋转 scale(s_x,s_y,s_z)=\\begin{bmatrix} s_x & 0 & 0 \\\\ 0 & s_y & 0 \\\\ 0 & 0 & s_z \\end{bmatrix} \\\\ shear-x(d_y,d_z)=\\begin{bmatrix} 1 & d_y & d_z \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}绕坐标轴的旋转我们采用右手坐标系，故二维中$x$轴向$y$轴旋转，对应到三维便是绕$z$轴旋转。 同理可推出绕$x$轴旋转（$y$转向$z$），绕$y$轴旋转（$z$转向$x$）。 rotate-z(\\phi)=\\begin{bmatrix} \\cos\\phi & -\\sin\\phi & 0 \\\\ \\sin\\phi & \\cos\\phi & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\\\ rotate-x(\\phi)=\\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & \\cos\\phi & -\\sin\\phi \\\\ 0 & \\sin\\phi & \\cos\\phi \\end{bmatrix} \\\\ rotate-y(\\phi)=\\begin{bmatrix} \\cos\\phi & 0 & \\sin\\phi \\\\ 0 & 1 & 0 \\\\ -\\sin\\phi & 0 & \\cos\\phi \\end{bmatrix} \\\\ 注意绕y轴\\sin的符号有一点不同值得注意的是，任意的旋转矩阵都是正交矩阵，它们的逆就。eee是它们的转置。 绕任意轴的旋转我们可以将绕任意轴的旋转转化为绕坐标轴的旋转。首先，将该轴旋转至某一坐标轴上，然后就运用上述基本旋转矩阵，最后再逆旋转回来即可。 设想要围绕旋转的轴为$u$，$R_1$是将$z$旋转到$u$的矩阵。那么旋转矩阵为：$R_1R_zR_1^T$，关键在于如何求出$R_1$。 我们以$u$作为一轴，构造一个三维正交右手坐标系。将$u$与$z$对齐，此时其它两轴就与$y$和$x$对齐了。构造方法如下： 任取不与$u$重合的方向$t$. 令轴$w=t \\times u$，$w$对应$y$. 令轴$v=w\\times u$，$v$对应$x$. 现在我们得到了$v,w,u$，分别对应$x,y,z$。我们取$R_1=(v,w,u)$，该旋转矩阵的含义便是将$x,y,z$旋转到$v,w,u$。知道$R_1$和$R_z$，就可以把旋转矩阵表示出来了。 \\begin{bmatrix} x_v & x_w & x_u \\\\ y_v & y_w & y_u \\\\ z_v & z_w & z_u \\end{bmatrix} \\begin{bmatrix} \\cos\\phi & -\\sin\\phi & 0 \\\\ \\sin\\phi & \\cos\\phi & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x_v & y_v & z_v \\\\ x_w & y_w & z_w \\\\ x_u & y_u & z_u \\end{bmatrix} 仿射变换既有旋转缩放等线性变换，又有位移的变换，称为仿射变换。由于位移不是线性变换，故我们需要引入一个新的维度使之“变成”线性变换，称为齐次坐标。 以二维上的点和向量为例。设一点为$(x,y)$，其在齐次坐标下就是$(x,y,1)$。设一向量为$(u,v)$，其在齐次坐标下是$(u,v,0)$。为什么用$0$表示向量？因为向量的大小方向不随位置的变化而变化，向量的位移没有意义，不需要为此增加一个新的维度。 假设有如下线性变换： x' = m_{11}x + m_{12}y \\\\ y' = m_{21}x + m_{22}y以及如下位移： x' = x + x_t \\\\ y' = y + y_t那么对应的仿射变换矩阵如下。注意：该矩阵先做线性变换，后做位移！！ \\begin{bmatrix} m_{11} & m_{12} & x_t \\\\ m_{21} & m_{22} & y_t \\\\ 0 & 0 & 1 \\end{bmatrix}在投影变换中，我们还会用到齐次坐标。 END.","tags":[{"name":"线性代数","slug":"线性代数","permalink":"https://solicey.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"CS","slug":"CS","permalink":"https://solicey.github.io/tags/CS/"},{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"}],"categories":[{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"GAMES101","slug":"图形学/GAMES101","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/"}]},{"title":"云知计划3.0","date":"2022-07-07T05:28:45.540Z","path":"wiki/Logs/hello-world/","text":"窃以为，创造乃学习的一大动力。 在高中的时候，我们反反复复地经历各种各样的考试。这些考试会频繁地给予我们正面的或是负面的反馈。正面的反馈鼓舞人心，负面的反馈催人上进。打个不恰当的比喻，考试就如同胡萝卜加大棒，时而给我们尝点甜头，时而又让我们吃点苦。我们在高中时期的学习动力很大一部分来源于这些喜怒无常的考试结果。 然而，上大学后，我们只能在期中和期末获取来自考试的反馈。如果仍然以考试结果作为学习的主要动力的话，我个人认为这是难以维系的。另外，我们需要认识到，高中时代的落幕意味着应试教育的退场，考试将不再是我们学习的唯一目的。我们从今往后所学的一切知识，都是为了更崇高、也更有意义的目的，那就是创造。 人与机器的最大差别就在于是否懂得自主创造。以往，我们机械地回答着试卷上的一道道问题，考试将我们异化成为了考试而学习的做题机器，我们的一切“创造”都离不开问题的引导。如今，我们若要实现身份的转变，就要学会自己“创造”问题并解决问题，并在此过程中获取巨大的成就感与继续学习的动力。只有这样，我们才能脱离做题家的思维定式，成为一个能够用自身所学自主创造新事物的完整的人。 云知计划，旨在将我所学到的知识内化于心，外化于一篇篇云端笔记。可以说，高中时代的最大创造活动非记笔记莫属了，但彼时的笔记带有很强的功利性与目的性，云知计划1.0与云知计划2.0仅仅围绕六门主科展开，应试色彩浓厚。如今的云知计划3.0着眼于更广泛的学科内容，收录的所有笔记都将为未来的创造活动提供参考与支持。 2022.7.7 Solitude21","tags":[{"name":"intro","slug":"intro","permalink":"https://solicey.github.io/tags/intro/"}],"categories":[{"name":"日志","slug":"日志","permalink":"https://solicey.github.io/categories/%E6%97%A5%E5%BF%97/"}]}],"categories":[{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"GAMES101","slug":"图形学/GAMES101","permalink":"https://solicey.github.io/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/GAMES101/"},{"name":"日志","slug":"日志","permalink":"https://solicey.github.io/categories/%E6%97%A5%E5%BF%97/"}],"tags":[{"name":"CS","slug":"CS","permalink":"https://solicey.github.io/tags/CS/"},{"name":"图形学","slug":"图形学","permalink":"https://solicey.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"},{"name":"线性代数","slug":"线性代数","permalink":"https://solicey.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"},{"name":"hexo","slug":"hexo","permalink":"https://solicey.github.io/tags/hexo/"},{"name":"intro","slug":"intro","permalink":"https://solicey.github.io/tags/intro/"}]}